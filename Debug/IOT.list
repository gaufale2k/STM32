
IOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e38  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004010  08004010  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004018  08004018  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004018  08004018  00014018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800401c  0800401c  0001401c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  0800402c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800402c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee93  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f54  00000000  00000000  0002eecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00030e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00031bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d6f  00000000  00000000  00032840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011600  00000000  00000000  000575af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e74fa  00000000  00000000  00068baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001500a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ec  00000000  00000000  001500fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003fe8 	.word	0x08003fe8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003fe8 	.word	0x08003fe8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b96e 	b.w	8000d38 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	468c      	mov	ip, r1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8083 	bne.w	8000b8a <__udivmoddi4+0x116>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d947      	bls.n	8000b1a <__udivmoddi4+0xa6>
 8000a8a:	fab2 f282 	clz	r2, r2
 8000a8e:	b142      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	f1c2 0020 	rsb	r0, r2, #32
 8000a94:	fa24 f000 	lsr.w	r0, r4, r0
 8000a98:	4091      	lsls	r1, r2
 8000a9a:	4097      	lsls	r7, r2
 8000a9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000aa0:	4094      	lsls	r4, r2
 8000aa2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000aa6:	0c23      	lsrs	r3, r4, #16
 8000aa8:	fbbc f6f8 	udiv	r6, ip, r8
 8000aac:	fa1f fe87 	uxth.w	lr, r7
 8000ab0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ab4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ab8:	fb06 f10e 	mul.w	r1, r6, lr
 8000abc:	4299      	cmp	r1, r3
 8000abe:	d909      	bls.n	8000ad4 <__udivmoddi4+0x60>
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ac6:	f080 8119 	bcs.w	8000cfc <__udivmoddi4+0x288>
 8000aca:	4299      	cmp	r1, r3
 8000acc:	f240 8116 	bls.w	8000cfc <__udivmoddi4+0x288>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	443b      	add	r3, r7
 8000ad4:	1a5b      	subs	r3, r3, r1
 8000ad6:	b2a4      	uxth	r4, r4
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ae4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ae8:	45a6      	cmp	lr, r4
 8000aea:	d909      	bls.n	8000b00 <__udivmoddi4+0x8c>
 8000aec:	193c      	adds	r4, r7, r4
 8000aee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af2:	f080 8105 	bcs.w	8000d00 <__udivmoddi4+0x28c>
 8000af6:	45a6      	cmp	lr, r4
 8000af8:	f240 8102 	bls.w	8000d00 <__udivmoddi4+0x28c>
 8000afc:	3802      	subs	r0, #2
 8000afe:	443c      	add	r4, r7
 8000b00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b04:	eba4 040e 	sub.w	r4, r4, lr
 8000b08:	2600      	movs	r6, #0
 8000b0a:	b11d      	cbz	r5, 8000b14 <__udivmoddi4+0xa0>
 8000b0c:	40d4      	lsrs	r4, r2
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e9c5 4300 	strd	r4, r3, [r5]
 8000b14:	4631      	mov	r1, r6
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	b902      	cbnz	r2, 8000b1e <__udivmoddi4+0xaa>
 8000b1c:	deff      	udf	#255	; 0xff
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d150      	bne.n	8000bc8 <__udivmoddi4+0x154>
 8000b26:	1bcb      	subs	r3, r1, r7
 8000b28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b2c:	fa1f f887 	uxth.w	r8, r7
 8000b30:	2601      	movs	r6, #1
 8000b32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b36:	0c21      	lsrs	r1, r4, #16
 8000b38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b40:	fb08 f30c 	mul.w	r3, r8, ip
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0xe4>
 8000b48:	1879      	adds	r1, r7, r1
 8000b4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0xe2>
 8000b50:	428b      	cmp	r3, r1
 8000b52:	f200 80e9 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b56:	4684      	mov	ip, r0
 8000b58:	1ac9      	subs	r1, r1, r3
 8000b5a:	b2a3      	uxth	r3, r4
 8000b5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b68:	fb08 f800 	mul.w	r8, r8, r0
 8000b6c:	45a0      	cmp	r8, r4
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x10c>
 8000b70:	193c      	adds	r4, r7, r4
 8000b72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x10a>
 8000b78:	45a0      	cmp	r8, r4
 8000b7a:	f200 80d9 	bhi.w	8000d30 <__udivmoddi4+0x2bc>
 8000b7e:	4618      	mov	r0, r3
 8000b80:	eba4 0408 	sub.w	r4, r4, r8
 8000b84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b88:	e7bf      	b.n	8000b0a <__udivmoddi4+0x96>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0x12e>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80b1 	beq.w	8000cf6 <__udivmoddi4+0x282>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x1cc>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0x140>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80b8 	bhi.w	8000d24 <__udivmoddi4+0x2b0>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	468c      	mov	ip, r1
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0a8      	beq.n	8000b14 <__udivmoddi4+0xa0>
 8000bc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f603 	lsr.w	r6, r0, r3
 8000bd0:	4097      	lsls	r7, r2
 8000bd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000bd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bda:	40d9      	lsrs	r1, r3
 8000bdc:	4330      	orrs	r0, r6
 8000bde:	0c03      	lsrs	r3, r0, #16
 8000be0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000be4:	fa1f f887 	uxth.w	r8, r7
 8000be8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f108 	mul.w	r1, r6, r8
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x19c>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c02:	f080 808d 	bcs.w	8000d20 <__udivmoddi4+0x2ac>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 808a 	bls.w	8000d20 <__udivmoddi4+0x2ac>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b281      	uxth	r1, r0
 8000c14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c20:	fb00 f308 	mul.w	r3, r0, r8
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x1c4>
 8000c28:	1879      	adds	r1, r7, r1
 8000c2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c2e:	d273      	bcs.n	8000d18 <__udivmoddi4+0x2a4>
 8000c30:	428b      	cmp	r3, r1
 8000c32:	d971      	bls.n	8000d18 <__udivmoddi4+0x2a4>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4439      	add	r1, r7
 8000c38:	1acb      	subs	r3, r1, r3
 8000c3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c3e:	e778      	b.n	8000b32 <__udivmoddi4+0xbe>
 8000c40:	f1c6 0c20 	rsb	ip, r6, #32
 8000c44:	fa03 f406 	lsl.w	r4, r3, r6
 8000c48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	0c3b      	lsrs	r3, r7, #16
 8000c62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c66:	fa1f f884 	uxth.w	r8, r4
 8000c6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c72:	fb09 fa08 	mul.w	sl, r9, r8
 8000c76:	458a      	cmp	sl, r1
 8000c78:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x220>
 8000c82:	1861      	adds	r1, r4, r1
 8000c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c88:	d248      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8a:	458a      	cmp	sl, r1
 8000c8c:	d946      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000c8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c92:	4421      	add	r1, r4
 8000c94:	eba1 010a 	sub.w	r1, r1, sl
 8000c98:	b2bf      	uxth	r7, r7
 8000c9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ca6:	fb00 f808 	mul.w	r8, r0, r8
 8000caa:	45b8      	cmp	r8, r7
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x24a>
 8000cae:	19e7      	adds	r7, r4, r7
 8000cb0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb4:	d22e      	bcs.n	8000d14 <__udivmoddi4+0x2a0>
 8000cb6:	45b8      	cmp	r8, r7
 8000cb8:	d92c      	bls.n	8000d14 <__udivmoddi4+0x2a0>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4427      	add	r7, r4
 8000cbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cc2:	eba7 0708 	sub.w	r7, r7, r8
 8000cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000cca:	454f      	cmp	r7, r9
 8000ccc:	46c6      	mov	lr, r8
 8000cce:	4649      	mov	r1, r9
 8000cd0:	d31a      	bcc.n	8000d08 <__udivmoddi4+0x294>
 8000cd2:	d017      	beq.n	8000d04 <__udivmoddi4+0x290>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x27a>
 8000cd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000cda:	eb67 0701 	sbc.w	r7, r7, r1
 8000cde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ce2:	40f2      	lsrs	r2, r6
 8000ce4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ce8:	40f7      	lsrs	r7, r6
 8000cea:	e9c5 2700 	strd	r2, r7, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	462e      	mov	r6, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e70b      	b.n	8000b14 <__udivmoddi4+0xa0>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	e6e9      	b.n	8000ad4 <__udivmoddi4+0x60>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6fd      	b.n	8000b00 <__udivmoddi4+0x8c>
 8000d04:	4543      	cmp	r3, r8
 8000d06:	d2e5      	bcs.n	8000cd4 <__udivmoddi4+0x260>
 8000d08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7df      	b.n	8000cd4 <__udivmoddi4+0x260>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e7d2      	b.n	8000cbe <__udivmoddi4+0x24a>
 8000d18:	4660      	mov	r0, ip
 8000d1a:	e78d      	b.n	8000c38 <__udivmoddi4+0x1c4>
 8000d1c:	4681      	mov	r9, r0
 8000d1e:	e7b9      	b.n	8000c94 <__udivmoddi4+0x220>
 8000d20:	4666      	mov	r6, ip
 8000d22:	e775      	b.n	8000c10 <__udivmoddi4+0x19c>
 8000d24:	4630      	mov	r0, r6
 8000d26:	e74a      	b.n	8000bbe <__udivmoddi4+0x14a>
 8000d28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d2c:	4439      	add	r1, r7
 8000d2e:	e713      	b.n	8000b58 <__udivmoddi4+0xe4>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	e724      	b.n	8000b80 <__udivmoddi4+0x10c>
 8000d36:	bf00      	nop

08000d38 <__aeabi_idiv0>:
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8000d44:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <BH1750_Init+0x34>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8000d4a:	f000 f813 	bl	8000d74 <BH1750_Reset>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d107      	bne.n	8000d64 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8000d54:	2045      	movs	r0, #69	; 0x45
 8000d56:	f000 f859 	bl	8000e0c <BH1750_SetMtreg>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <BH1750_Init+0x28>
			return BH1750_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	e000      	b.n	8000d66 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000034 	.word	0x20000034

08000d74 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <BH1750_Reset+0x30>)
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	1dfa      	adds	r2, r7, #7
 8000d84:	230a      	movs	r3, #10
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	2146      	movs	r1, #70	; 0x46
 8000d8c:	f001 f8c2 	bl	8001f14 <HAL_I2C_Master_Transmit>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <BH1750_Reset+0x26>
		return BH1750_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	e000      	b.n	8000d9c <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000034 	.word	0x20000034

08000da8 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <BH1750_SetMode+0x22>
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <BH1750_SetMode+0x22>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e018      	b.n	8000dfc <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <BH1750_SetMode+0x30>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e011      	b.n	8000dfc <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <BH1750_SetMode+0x5c>)
 8000ddc:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <BH1750_SetMode+0x60>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	1dfa      	adds	r2, r7, #7
 8000de4:	230a      	movs	r3, #10
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2301      	movs	r3, #1
 8000dea:	2146      	movs	r1, #70	; 0x46
 8000dec:	f001 f892 	bl	8001f14 <HAL_I2C_Master_Transmit>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <BH1750_SetMode+0x52>
		return BH1750_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000030 	.word	0x20000030
 8000e08:	20000034 	.word	0x20000034

08000e0c <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b1e      	cmp	r3, #30
 8000e1a:	d902      	bls.n	8000e22 <BH1750_SetMtreg+0x16>
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2bff      	cmp	r3, #255	; 0xff
 8000e20:	d101      	bne.n	8000e26 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e037      	b.n	8000e96 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <BH1750_SetMtreg+0x94>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	b25b      	sxtb	r3, r3
 8000e44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <BH1750_SetMtreg+0x98>)
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	f107 020c 	add.w	r2, r7, #12
 8000e56:	230a      	movs	r3, #10
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	2146      	movs	r1, #70	; 0x46
 8000e5e:	f001 f859 	bl	8001f14 <HAL_I2C_Master_Transmit>
 8000e62:	4603      	mov	r3, r0
 8000e64:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e012      	b.n	8000e96 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <BH1750_SetMtreg+0x98>)
 8000e72:	6818      	ldr	r0, [r3, #0]
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	1c5a      	adds	r2, r3, #1
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2146      	movs	r1, #70	; 0x46
 8000e82:	f001 f847 	bl	8001f14 <HAL_I2C_Master_Transmit>
 8000e86:	4603      	mov	r3, r0
 8000e88:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e000      	b.n	8000e96 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000038 	.word	0x20000038
 8000ea4:	20000034 	.word	0x20000034

08000ea8 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <BH1750_ReadLight+0xa0>)
 8000eb2:	6818      	ldr	r0, [r3, #0]
 8000eb4:	f107 0208 	add.w	r2, r7, #8
 8000eb8:	230a      	movs	r3, #10
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	2146      	movs	r1, #70	; 0x46
 8000ec0:	f001 f91c 	bl	80020fc <HAL_I2C_Master_Receive>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d138      	bne.n	8000f3c <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8000eca:	7a3b      	ldrb	r3, [r7, #8]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	7a7a      	ldrb	r2, [r7, #9]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eda:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <BH1750_ReadLight+0xa4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b45      	cmp	r3, #69	; 0x45
 8000ee4:	d00f      	beq.n	8000f06 <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <BH1750_ReadLight+0xa4>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000f50 <BH1750_ReadLight+0xa8>
 8000ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efa:	ed97 7a03 	vldr	s14, [r7, #12]
 8000efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f02:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <BH1750_ReadLight+0xac>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b21      	cmp	r3, #33	; 0x21
 8000f0c:	d003      	beq.n	8000f16 <BH1750_ReadLight+0x6e>
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <BH1750_ReadLight+0xac>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b11      	cmp	r3, #17
 8000f14:	d107      	bne.n	8000f26 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 8000f16:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f22:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8000f26:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f2a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000f58 <BH1750_ReadLight+0xb0>
 8000f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e000      	b.n	8000f3e <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8000f3c:	2301      	movs	r3, #1
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000034 	.word	0x20000034
 8000f4c:	20000038 	.word	0x20000038
 8000f50:	428a0000 	.word	0x428a0000
 8000f54:	20000030 	.word	0x20000030
 8000f58:	3f99999a 	.word	0x3f99999a

08000f5c <microDelay>:


// Cảm biến áng sáng
float BH1750_lux;
void microDelay(uint16_t us)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <microDelay+0x30>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	625a      	str	r2, [r3, #36]	; 0x24
    while ((uint16_t)__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000f6e:	bf00      	nop
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <microDelay+0x30>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d8f8      	bhi.n	8000f70 <microDelay+0x14>
}
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	200000a0 	.word	0x200000a0

08000f90 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000fa8:	2340      	movs	r3, #64	; 0x40
 8000faa:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_OD;
 8000fac:	2311      	movs	r3, #17
 8000fae:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482a      	ldr	r0, [pc, #168]	; (8001068 <DHT11_Start+0xd8>)
 8000fbe:	f000 fd3b 	bl	8001a38 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	4828      	ldr	r0, [pc, #160]	; (8001068 <DHT11_Start+0xd8>)
 8000fc8:	f000 fefa 	bl	8001dc0 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000fcc:	2014      	movs	r0, #20
 8000fce:	f000 fc29 	bl	8001824 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4824      	ldr	r0, [pc, #144]	; (8001068 <DHT11_Start+0xd8>)
 8000fd8:	f000 fef2 	bl	8001dc0 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000fdc:	201e      	movs	r0, #30
 8000fde:	f7ff ffbd 	bl	8000f5c <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000fea:	463b      	mov	r3, r7
 8000fec:	4619      	mov	r1, r3
 8000fee:	481e      	ldr	r0, [pc, #120]	; (8001068 <DHT11_Start+0xd8>)
 8000ff0:	f000 fd22 	bl	8001a38 <HAL_GPIO_Init>
  microDelay (40);
 8000ff4:	2028      	movs	r0, #40	; 0x28
 8000ff6:	f7ff ffb1 	bl	8000f5c <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000ffa:	2140      	movs	r1, #64	; 0x40
 8000ffc:	481a      	ldr	r0, [pc, #104]	; (8001068 <DHT11_Start+0xd8>)
 8000ffe:	f000 fec7 	bl	8001d90 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10b      	bne.n	8001020 <DHT11_Start+0x90>
  {
    microDelay (80);
 8001008:	2050      	movs	r0, #80	; 0x50
 800100a:	f7ff ffa7 	bl	8000f5c <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800100e:	2140      	movs	r1, #64	; 0x40
 8001010:	4815      	ldr	r0, [pc, #84]	; (8001068 <DHT11_Start+0xd8>)
 8001012:	f000 febd 	bl	8001d90 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <DHT11_Start+0x90>
 800101c:	2301      	movs	r3, #1
 800101e:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001020:	f000 fbf4 	bl	800180c <HAL_GetTick>
 8001024:	4603      	mov	r3, r0
 8001026:	4a11      	ldr	r2, [pc, #68]	; (800106c <DHT11_Start+0xdc>)
 8001028:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 800102a:	f000 fbef 	bl	800180c <HAL_GetTick>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <DHT11_Start+0xe0>)
 8001032:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001034:	e004      	b.n	8001040 <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 8001036:	f000 fbe9 	bl	800180c <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	4a0c      	ldr	r2, [pc, #48]	; (8001070 <DHT11_Start+0xe0>)
 800103e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <DHT11_Start+0xd8>)
 8001044:	f000 fea4 	bl	8001d90 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <DHT11_Start+0xcc>
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <DHT11_Start+0xdc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1c9a      	adds	r2, r3, #2
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <DHT11_Start+0xe0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8ec      	bhi.n	8001036 <DHT11_Start+0xa6>
  }
  return Response;
 800105c:	7dfb      	ldrb	r3, [r7, #23]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021c00 	.word	0x40021c00
 800106c:	20000094 	.word	0x20000094
 8001070:	2000008c 	.word	0x2000008c

08001074 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e063      	b.n	8001148 <DHT11_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 8001080:	f000 fbc4 	bl	800180c <HAL_GetTick>
 8001084:	4603      	mov	r3, r0
 8001086:	4a34      	ldr	r2, [pc, #208]	; (8001158 <DHT11_Read+0xe4>)
 8001088:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800108a:	f000 fbbf 	bl	800180c <HAL_GetTick>
 800108e:	4603      	mov	r3, r0
 8001090:	4a32      	ldr	r2, [pc, #200]	; (800115c <DHT11_Read+0xe8>)
 8001092:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001094:	e004      	b.n	80010a0 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001096:	f000 fbb9 	bl	800180c <HAL_GetTick>
 800109a:	4603      	mov	r3, r0
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <DHT11_Read+0xe8>)
 800109e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80010a0:	2140      	movs	r1, #64	; 0x40
 80010a2:	482f      	ldr	r0, [pc, #188]	; (8001160 <DHT11_Read+0xec>)
 80010a4:	f000 fe74 	bl	8001d90 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d106      	bne.n	80010bc <DHT11_Read+0x48>
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <DHT11_Read+0xe4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	1c9a      	adds	r2, r3, #2
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <DHT11_Read+0xe8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8ec      	bhi.n	8001096 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 80010bc:	2028      	movs	r0, #40	; 0x28
 80010be:	f7ff ff4d 	bl	8000f5c <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	4826      	ldr	r0, [pc, #152]	; (8001160 <DHT11_Read+0xec>)
 80010c6:	f000 fe63 	bl	8001d90 <HAL_GPIO_ReadPin>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10e      	bne.n	80010ee <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2201      	movs	r2, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	b25b      	sxtb	r3, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010e6:	4013      	ands	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	71bb      	strb	r3, [r7, #6]
 80010ec:	e00b      	b.n	8001106 <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f1c3 0307 	rsb	r3, r3, #7
 80010f4:	2201      	movs	r2, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001100:	4313      	orrs	r3, r2
 8001102:	b25b      	sxtb	r3, r3
 8001104:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001106:	f000 fb81 	bl	800180c <HAL_GetTick>
 800110a:	4603      	mov	r3, r0
 800110c:	4a12      	ldr	r2, [pc, #72]	; (8001158 <DHT11_Read+0xe4>)
 800110e:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001110:	f000 fb7c 	bl	800180c <HAL_GetTick>
 8001114:	4603      	mov	r3, r0
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <DHT11_Read+0xe8>)
 8001118:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800111a:	e004      	b.n	8001126 <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 800111c:	f000 fb76 	bl	800180c <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <DHT11_Read+0xe8>)
 8001124:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001126:	2140      	movs	r1, #64	; 0x40
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <DHT11_Read+0xec>)
 800112a:	f000 fe31 	bl	8001d90 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <DHT11_Read+0xce>
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <DHT11_Read+0xe4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	1c9a      	adds	r2, r3, #2
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <DHT11_Read+0xe8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d8ec      	bhi.n	800111c <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	3301      	adds	r3, #1
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d998      	bls.n	8001080 <DHT11_Read+0xc>
    }
  }
  return b;
 800114e:	79bb      	ldrb	r3, [r7, #6]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000094 	.word	0x20000094
 800115c:	2000008c 	.word	0x2000008c
 8001160:	40021c00 	.word	0x40021c00

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	ed2d 8b02 	vpush	{d8}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116c:	f000 fafd 	bl	800176a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001170:	f000 f89a 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001174:	f000 f9bc 	bl	80014f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001178:	f000 f926 	bl	80013c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800117c:	f000 f964 	bl	8001448 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001180:	483e      	ldr	r0, [pc, #248]	; (800127c <main+0x118>)
 8001182:	f002 fc07 	bl	8003994 <HAL_TIM_Base_Start>
  HAL_Delay(1000);
 8001186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800118a:	f000 fb4b 	bl	8001824 <HAL_Delay>

  /* USER CODE END 2 */
  BH1750_Init(&hi2c1);
 800118e:	483c      	ldr	r0, [pc, #240]	; (8001280 <main+0x11c>)
 8001190:	f7ff fdd4 	bl	8000d3c <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8001194:	2011      	movs	r0, #17
 8001196:	f7ff fe07 	bl	8000da8 <BH1750_SetMode>

    /* USER CODE BEGIN 3 */


	  // CẢM BIẾN ÁNH SÁNG BH1750
	  BH1750_ReadLight(&BH1750_lux);
 800119a:	483a      	ldr	r0, [pc, #232]	; (8001284 <main+0x120>)
 800119c:	f7ff fe84 	bl	8000ea8 <BH1750_ReadLight>
	  // CẢM BIẾN NHIỆT ĐỘ & ĐỘ ẨM
	    if(DHT11_Start())
 80011a0:	f7ff fef6 	bl	8000f90 <DHT11_Start>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f7      	beq.n	800119a <main+0x36>
	    {
	      RHI = DHT11_Read(); // Relative humidity integral
 80011aa:	f7ff ff63 	bl	8001074 <DHT11_Read>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b35      	ldr	r3, [pc, #212]	; (8001288 <main+0x124>)
 80011b4:	701a      	strb	r2, [r3, #0]
	      RHD = DHT11_Read(); // Relative humidity decimal
 80011b6:	f7ff ff5d 	bl	8001074 <DHT11_Read>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b33      	ldr	r3, [pc, #204]	; (800128c <main+0x128>)
 80011c0:	701a      	strb	r2, [r3, #0]
	      TCI = DHT11_Read(); // Celsius integral
 80011c2:	f7ff ff57 	bl	8001074 <DHT11_Read>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <main+0x12c>)
 80011cc:	701a      	strb	r2, [r3, #0]
	      TCD = DHT11_Read(); // Celsius decimal
 80011ce:	f7ff ff51 	bl	8001074 <DHT11_Read>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b2f      	ldr	r3, [pc, #188]	; (8001294 <main+0x130>)
 80011d8:	701a      	strb	r2, [r3, #0]
	      SUM = DHT11_Read(); // Check sum
 80011da:	f7ff ff4b 	bl	8001074 <DHT11_Read>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <main+0x134>)
 80011e4:	701a      	strb	r2, [r3, #0]
	      if (RHI + RHD + TCI + TCD == SUM)
 80011e6:	4b28      	ldr	r3, [pc, #160]	; (8001288 <main+0x124>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <main+0x128>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a27      	ldr	r2, [pc, #156]	; (8001290 <main+0x12c>)
 80011f4:	7812      	ldrb	r2, [r2, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a26      	ldr	r2, [pc, #152]	; (8001294 <main+0x130>)
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	4a26      	ldr	r2, [pc, #152]	; (8001298 <main+0x134>)
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	4293      	cmp	r3, r2
 8001204:	d1c9      	bne.n	800119a <main+0x36>
	      {
	        tCelsius = (float)TCI + (float)(TCD/10.0);  // độ C
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <main+0x12c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <main+0x130>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f948 	bl	80004ac <__aeabi_i2d>
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <main+0x138>)
 8001222:	f7ff fad7 	bl	80007d4 <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fbb9 	bl	80009a4 <__aeabi_d2f>
 8001232:	ee07 0a90 	vmov	s15, r0
 8001236:	ee78 7a27 	vadd.f32	s15, s16, s15
 800123a:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <main+0x13c>)
 800123c:	edc3 7a00 	vstr	s15, [r3]
	        RH = (float)RHI + (float)(RHD/10.0);  // độ ẩm
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <main+0x124>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <main+0x128>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f92b 	bl	80004ac <__aeabi_i2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <main+0x138>)
 800125c:	f7ff faba 	bl	80007d4 <__aeabi_ddiv>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fb9c 	bl	80009a4 <__aeabi_d2f>
 800126c:	ee07 0a90 	vmov	s15, r0
 8001270:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001274:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <main+0x140>)
 8001276:	edc3 7a00 	vstr	s15, [r3]
	  BH1750_ReadLight(&BH1750_lux);
 800127a:	e78e      	b.n	800119a <main+0x36>
 800127c:	200000a0 	.word	0x200000a0
 8001280:	20000040 	.word	0x20000040
 8001284:	20000098 	.word	0x20000098
 8001288:	20000090 	.word	0x20000090
 800128c:	2000009c 	.word	0x2000009c
 8001290:	200000ed 	.word	0x200000ed
 8001294:	2000003c 	.word	0x2000003c
 8001298:	200000ec 	.word	0x200000ec
 800129c:	40240000 	.word	0x40240000
 80012a0:	20000028 	.word	0x20000028
 80012a4:	2000002c 	.word	0x2000002c

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0b4      	sub	sp, #208	; 0xd0
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012b2:	2230      	movs	r2, #48	; 0x30
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fe8e 	bl	8003fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	2284      	movs	r2, #132	; 0x84
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fe7f 	bl	8003fd8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <SystemClock_Config+0x118>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a38      	ldr	r2, [pc, #224]	; (80013c0 <SystemClock_Config+0x118>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <SystemClock_Config+0x118>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <SystemClock_Config+0x11c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <SystemClock_Config+0x11c>)
 80012f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <SystemClock_Config+0x11c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130a:	2302      	movs	r3, #2
 800130c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001310:	2301      	movs	r3, #1
 8001312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001316:	2310      	movs	r3, #16
 8001318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001322:	2300      	movs	r3, #0
 8001324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001328:	2308      	movs	r3, #8
 800132a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 200;
 800132e:	23c8      	movs	r3, #200	; 0xc8
 8001330:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800133a:	2302      	movs	r3, #2
 800133c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fa97 	bl	8002878 <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001350:	f000 f918 	bl	8001584 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001354:	f001 fa40 	bl	80027d8 <HAL_PWREx_EnableOverDrive>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800135e:	f000 f911 	bl	8001584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001374:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800137c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001380:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001384:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001388:	2106      	movs	r1, #6
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fd18 	bl	8002dc0 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001396:	f000 f8f5 	bl	8001584 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800139a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800139e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 feab 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80013b4:	f000 f8e6 	bl	8001584 <Error_Handler>
  }
}
 80013b8:	bf00      	nop
 80013ba:	37d0      	adds	r7, #208	; 0xd0
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000

080013c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_I2C1_Init+0x74>)
 80013ce:	4a1c      	ldr	r2, [pc, #112]	; (8001440 <MX_I2C1_Init+0x78>)
 80013d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_I2C1_Init+0x74>)
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_I2C1_Init+0x7c>)
 80013d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_I2C1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_I2C1_Init+0x74>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_I2C1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_I2C1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_I2C1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <MX_I2C1_Init+0x74>)
 8001404:	f000 fcf6 	bl	8001df4 <HAL_I2C_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800140e:	f000 f8b9 	bl	8001584 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001412:	2100      	movs	r1, #0
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <MX_I2C1_Init+0x74>)
 8001416:	f001 f947 	bl	80026a8 <HAL_I2CEx_ConfigAnalogFilter>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001420:	f000 f8b0 	bl	8001584 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001424:	2100      	movs	r1, #0
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_I2C1_Init+0x74>)
 8001428:	f001 f989 	bl	800273e <HAL_I2CEx_ConfigDigitalFilter>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001432:	f000 f8a7 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000040 	.word	0x20000040
 8001440:	40005400 	.word	0x40005400
 8001444:	00c0eaff 	.word	0x00c0eaff

08001448 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_TIM1_Init+0xa0>)
 8001468:	4a20      	ldr	r2, [pc, #128]	; (80014ec <MX_TIM1_Init+0xa4>)
 800146a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <MX_TIM1_Init+0xa0>)
 800146e:	2263      	movs	r2, #99	; 0x63
 8001470:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_TIM1_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_TIM1_Init+0xa0>)
 800147a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_TIM1_Init+0xa0>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_TIM1_Init+0xa0>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_TIM1_Init+0xa0>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001492:	4815      	ldr	r0, [pc, #84]	; (80014e8 <MX_TIM1_Init+0xa0>)
 8001494:	f002 fa26 	bl	80038e4 <HAL_TIM_Base_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800149e:	f000 f871 	bl	8001584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <MX_TIM1_Init+0xa0>)
 80014b0:	f002 fae0 	bl	8003a74 <HAL_TIM_ConfigClockSource>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014ba:	f000 f863 	bl	8001584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	4619      	mov	r1, r3
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <MX_TIM1_Init+0xa0>)
 80014d0:	f002 fcd0 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80014da:	f000 f853 	bl	8001584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	3720      	adds	r7, #32
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000a0 	.word	0x200000a0
 80014ec:	40010000 	.word	0x40010000

080014f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_GPIO_Init+0x8c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <MX_GPIO_Init+0x8c>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_GPIO_Init+0x8c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_GPIO_Init+0x8c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <MX_GPIO_Init+0x8c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_GPIO_Init+0x8c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_GPIO_Init+0x8c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <MX_GPIO_Init+0x8c>)
 800153c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_GPIO_Init+0x8c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	2140      	movs	r1, #64	; 0x40
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <MX_GPIO_Init+0x90>)
 8001554:	f000 fc34 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_GPIO_Init+0x90>)
 8001570:	f000 fa62 	bl	8001a38 <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40021c00 	.word	0x40021c00

08001584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001588:	b672      	cpsid	i
}
 800158a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800158c:	e7fe      	b.n	800158c <Error_Handler+0x8>
	...

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_MspInit+0x44>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_MspInit+0x44>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_MspInit+0x44>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <HAL_MspInit+0x44>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_MspInit+0x44>)
 80015b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_MspInit+0x44>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800

080015d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_I2C_MspInit+0x7c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d128      	bne.n	800164c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <HAL_I2C_MspInit+0x80>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a16      	ldr	r2, [pc, #88]	; (8001658 <HAL_I2C_MspInit+0x80>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_I2C_MspInit+0x80>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001624:	2304      	movs	r3, #4
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	480b      	ldr	r0, [pc, #44]	; (800165c <HAL_I2C_MspInit+0x84>)
 8001630:	f000 fa02 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_I2C_MspInit+0x80>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_I2C_MspInit+0x80>)
 800163a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <HAL_I2C_MspInit+0x80>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40005400 	.word	0x40005400
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400

08001660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <HAL_TIM_Base_MspInit+0x38>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d10b      	bne.n	800168a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_TIM_Base_MspInit+0x3c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_TIM_Base_MspInit+0x3c>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_TIM_Base_MspInit+0x3c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40010000 	.word	0x40010000
 800169c:	40023800 	.word	0x40023800

080016a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <NMI_Handler+0x4>

080016a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <MemManage_Handler+0x4>

080016b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler+0x4>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <UsageFault_Handler+0x4>

080016be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ec:	f000 f87a 	bl	80017e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001750 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800171c:	480d      	ldr	r0, [pc, #52]	; (8001754 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800171e:	490e      	ldr	r1, [pc, #56]	; (8001758 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001720:	4a0e      	ldr	r2, [pc, #56]	; (800175c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001734:	4c0b      	ldr	r4, [pc, #44]	; (8001764 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001742:	f7ff ffd7 	bl	80016f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001746:	f002 fc23 	bl	8003f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff fd0b 	bl	8001164 <main>
  bx  lr    
 800174e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001750:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800175c:	08004020 	.word	0x08004020
  ldr r2, =_sbss
 8001760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001764:	200000f4 	.word	0x200000f4

08001768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>

0800176a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176e:	2003      	movs	r0, #3
 8001770:	f000 f92e 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001774:	200f      	movs	r0, #15
 8001776:	f000 f805 	bl	8001784 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800177a:	f7ff ff09 	bl	8001590 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x54>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_InitTick+0x58>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4619      	mov	r1, r3
 8001796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179a:	fbb3 f3f1 	udiv	r3, r3, r1
 800179e:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f93b 	bl	8001a1e <HAL_SYSTICK_Config>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00e      	b.n	80017d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d80a      	bhi.n	80017ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 f911 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4a06      	ldr	r2, [pc, #24]	; (80017e0 <HAL_InitTick+0x5c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e000      	b.n	80017d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000008 	.word	0x20000008
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008
 8001808:	200000f0 	.word	0x200000f0

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	; (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200000f0 	.word	0x200000f0

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ffee 	bl	800180c <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_Delay+0x44>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184a:	bf00      	nop
 800184c:	f7ff ffde 	bl	800180c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000008 	.word	0x20000008

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <__NVIC_SetPriorityGrouping+0x40>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	4313      	orrs	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	; (80018ac <__NVIC_SetPriorityGrouping+0x40>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00
 80018b0:	05fa0000 	.word	0x05fa0000

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff47 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff5c 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffb0 	bl	800198c <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e175      	b.n	8001d44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8164 	bne.w	8001d3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d00b      	beq.n	8001a96 <HAL_GPIO_Init+0x5e>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a8a:	2b11      	cmp	r3, #17
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b12      	cmp	r3, #18
 8001a94:	d130      	bne.n	8001af8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 0201 	and.w	r2, r3, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x100>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b12      	cmp	r3, #18
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80be 	beq.w	8001d3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_GPIO_Init+0x324>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bda:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_GPIO_Init+0x328>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_GPIO_Init+0x32c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d037      	beq.n	8001c76 <HAL_GPIO_Init+0x23e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a57      	ldr	r2, [pc, #348]	; (8001d68 <HAL_GPIO_Init+0x330>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d031      	beq.n	8001c72 <HAL_GPIO_Init+0x23a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a56      	ldr	r2, [pc, #344]	; (8001d6c <HAL_GPIO_Init+0x334>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d02b      	beq.n	8001c6e <HAL_GPIO_Init+0x236>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a55      	ldr	r2, [pc, #340]	; (8001d70 <HAL_GPIO_Init+0x338>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d025      	beq.n	8001c6a <HAL_GPIO_Init+0x232>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a54      	ldr	r2, [pc, #336]	; (8001d74 <HAL_GPIO_Init+0x33c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01f      	beq.n	8001c66 <HAL_GPIO_Init+0x22e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a53      	ldr	r2, [pc, #332]	; (8001d78 <HAL_GPIO_Init+0x340>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d019      	beq.n	8001c62 <HAL_GPIO_Init+0x22a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_GPIO_Init+0x344>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d013      	beq.n	8001c5e <HAL_GPIO_Init+0x226>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a51      	ldr	r2, [pc, #324]	; (8001d80 <HAL_GPIO_Init+0x348>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00d      	beq.n	8001c5a <HAL_GPIO_Init+0x222>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a50      	ldr	r2, [pc, #320]	; (8001d84 <HAL_GPIO_Init+0x34c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d007      	beq.n	8001c56 <HAL_GPIO_Init+0x21e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a4f      	ldr	r2, [pc, #316]	; (8001d88 <HAL_GPIO_Init+0x350>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_GPIO_Init+0x21a>
 8001c4e:	2309      	movs	r3, #9
 8001c50:	e012      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c52:	230a      	movs	r3, #10
 8001c54:	e010      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c56:	2308      	movs	r3, #8
 8001c58:	e00e      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	e00c      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c5e:	2306      	movs	r3, #6
 8001c60:	e00a      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c62:	2305      	movs	r3, #5
 8001c64:	e008      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c66:	2304      	movs	r3, #4
 8001c68:	e006      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e004      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e002      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_GPIO_Init+0x240>
 8001c76:	2300      	movs	r3, #0
 8001c78:	69fa      	ldr	r2, [r7, #28]
 8001c7a:	f002 0203 	and.w	r2, r2, #3
 8001c7e:	0092      	lsls	r2, r2, #2
 8001c80:	4093      	lsls	r3, r2
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c88:	4935      	ldr	r1, [pc, #212]	; (8001d60 <HAL_GPIO_Init+0x328>)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	089b      	lsrs	r3, r3, #2
 8001c8e:	3302      	adds	r3, #2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cba:	4a34      	ldr	r2, [pc, #208]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cc0:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0e:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <HAL_GPIO_Init+0x354>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3301      	adds	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	2b0f      	cmp	r3, #15
 8001d48:	f67f ae86 	bls.w	8001a58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3724      	adds	r7, #36	; 0x24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40013800 	.word	0x40013800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40020400 	.word	0x40020400
 8001d6c:	40020800 	.word	0x40020800
 8001d70:	40020c00 	.word	0x40020c00
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40021400 	.word	0x40021400
 8001d7c:	40021800 	.word	0x40021800
 8001d80:	40021c00 	.word	0x40021c00
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40022400 	.word	0x40022400
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e001      	b.n	8001db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ddc:	e003      	b.n	8001de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dde:	887b      	ldrh	r3, [r7, #2]
 8001de0:	041a      	lsls	r2, r3, #16
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	619a      	str	r2, [r3, #24]
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fbdc 	bl	80015d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2224      	movs	r2, #36	; 0x24
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	e006      	b.n	8001e7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d104      	bne.n	8001e8e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_I2C_Init+0x11c>)
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	ea42 0103 	orr.w	r1, r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	021a      	lsls	r2, r3, #8
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69d9      	ldr	r1, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	02008000 	.word	0x02008000

08001f14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	460b      	mov	r3, r1
 8001f22:	817b      	strh	r3, [r7, #10]
 8001f24:	4613      	mov	r3, r2
 8001f26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	f040 80da 	bne.w	80020ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_I2C_Master_Transmit+0x30>
 8001f40:	2302      	movs	r3, #2
 8001f42:	e0d3      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f4c:	f7ff fc5e 	bl	800180c <HAL_GetTick>
 8001f50:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2319      	movs	r3, #25
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f9e6 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e0be      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2221      	movs	r2, #33	; 0x21
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	893a      	ldrh	r2, [r7, #8]
 8001f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2bff      	cmp	r3, #255	; 0xff
 8001f9e:	d90e      	bls.n	8001fbe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	22ff      	movs	r2, #255	; 0xff
 8001fa4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	8979      	ldrh	r1, [r7, #10]
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fb48 	bl	800264c <I2C_TransferConfig>
 8001fbc:	e06c      	b.n	8002098 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	8979      	ldrh	r1, [r7, #10]
 8001fd0:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fb37 	bl	800264c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001fde:	e05b      	b.n	8002098 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f9e3 	bl	80023b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e07b      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	781a      	ldrb	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	1c5a      	adds	r2, r3, #1
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d034      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x184>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	d130      	bne.n	8002098 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	2200      	movs	r2, #0
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f975 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e04d      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002054:	b29b      	uxth	r3, r3
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d90e      	bls.n	8002078 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	22ff      	movs	r2, #255	; 0xff
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	b2da      	uxtb	r2, r3
 8002066:	8979      	ldrh	r1, [r7, #10]
 8002068:	2300      	movs	r3, #0
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 faeb 	bl	800264c <I2C_TransferConfig>
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	b2da      	uxtb	r2, r3
 8002088:	8979      	ldrh	r1, [r7, #10]
 800208a:	2300      	movs	r3, #0
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fada 	bl	800264c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d19e      	bne.n	8001fe0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f9c2 	bl	8002430 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e01a      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2220      	movs	r2, #32
 80020bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80020ca:	400b      	ands	r3, r1
 80020cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	80002000 	.word	0x80002000
 80020f8:	fe00e800 	.word	0xfe00e800

080020fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	461a      	mov	r2, r3
 8002108:	460b      	mov	r3, r1
 800210a:	817b      	strh	r3, [r7, #10]
 800210c:	4613      	mov	r3, r2
 800210e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b20      	cmp	r3, #32
 800211a:	f040 80db 	bne.w	80022d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_I2C_Master_Receive+0x30>
 8002128:	2302      	movs	r3, #2
 800212a:	e0d4      	b.n	80022d6 <HAL_I2C_Master_Receive+0x1da>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002134:	f7ff fb6a 	bl	800180c <HAL_GetTick>
 8002138:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2319      	movs	r3, #25
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f8f2 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0bf      	b.n	80022d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2222      	movs	r2, #34	; 0x22
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2210      	movs	r2, #16
 8002162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	2bff      	cmp	r3, #255	; 0xff
 8002186:	d90e      	bls.n	80021a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	b2da      	uxtb	r2, r3
 8002194:	8979      	ldrh	r1, [r7, #10]
 8002196:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <HAL_I2C_Master_Receive+0x1e4>)
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fa54 	bl	800264c <I2C_TransferConfig>
 80021a4:	e06d      	b.n	8002282 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	8979      	ldrh	r1, [r7, #10]
 80021b8:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <HAL_I2C_Master_Receive+0x1e4>)
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 fa43 	bl	800264c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80021c6:	e05c      	b.n	8002282 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	6a39      	ldr	r1, [r7, #32]
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f96b 	bl	80024a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e07c      	b.n	80022d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b29a      	uxth	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002212:	b29b      	uxth	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d034      	beq.n	8002282 <HAL_I2C_Master_Receive+0x186>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d130      	bne.n	8002282 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2200      	movs	r2, #0
 8002228:	2180      	movs	r1, #128	; 0x80
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f880 	bl	8002330 <I2C_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e04d      	b.n	80022d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	2bff      	cmp	r3, #255	; 0xff
 8002242:	d90e      	bls.n	8002262 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224e:	b2da      	uxtb	r2, r3
 8002250:	8979      	ldrh	r1, [r7, #10]
 8002252:	2300      	movs	r3, #0
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f9f6 	bl	800264c <I2C_TransferConfig>
 8002260:	e00f      	b.n	8002282 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	b2da      	uxtb	r2, r3
 8002272:	8979      	ldrh	r1, [r7, #10]
 8002274:	2300      	movs	r3, #0
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f9e5 	bl	800264c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d19d      	bne.n	80021c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	6a39      	ldr	r1, [r7, #32]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 f8cd 	bl	8002430 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e01a      	b.n	80022d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2220      	movs	r2, #32
 80022a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_I2C_Master_Receive+0x1e8>)
 80022b4:	400b      	ands	r3, r1
 80022b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	e000      	b.n	80022d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	80002400 	.word	0x80002400
 80022e4:	fe00e800 	.word	0xfe00e800

080022e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d103      	bne.n	8002306 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2200      	movs	r2, #0
 8002304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d007      	beq.n	8002324 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699a      	ldr	r2, [r3, #24]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	619a      	str	r2, [r3, #24]
  }
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002340:	e022      	b.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d01e      	beq.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234a:	f7ff fa5f 	bl	800180c <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d302      	bcc.n	8002360 <I2C_WaitOnFlagUntilTimeout+0x30>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d113      	bne.n	8002388 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e00f      	b.n	80023a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4013      	ands	r3, r2
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	429a      	cmp	r2, r3
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d0cd      	beq.n	8002342 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023bc:	e02c      	b.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f8dc 	bl	8002580 <I2C_IsAcknowledgeFailed>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e02a      	b.n	8002428 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d01e      	beq.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023da:	f7ff fa17 	bl	800180c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d302      	bcc.n	80023f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d113      	bne.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e007      	b.n	8002428 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d1cb      	bne.n	80023be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800243c:	e028      	b.n	8002490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68b9      	ldr	r1, [r7, #8]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f89c 	bl	8002580 <I2C_IsAcknowledgeFailed>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e026      	b.n	80024a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7ff f9db 	bl	800180c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d113      	bne.n	8002490 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f043 0220 	orr.w	r2, r3, #32
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e007      	b.n	80024a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b20      	cmp	r3, #32
 800249c:	d1cf      	bne.n	800243e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024b4:	e055      	b.n	8002562 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f860 	bl	8002580 <I2C_IsAcknowledgeFailed>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e053      	b.n	8002572 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	d129      	bne.n	800252c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d105      	bne.n	80024f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e03f      	b.n	8002572 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2220      	movs	r2, #32
 80024f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8002506:	400b      	ands	r3, r1
 8002508:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e022      	b.n	8002572 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252c:	f7ff f96e 	bl	800180c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	429a      	cmp	r2, r3
 800253a:	d302      	bcc.n	8002542 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f043 0220 	orr.w	r2, r3, #32
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e007      	b.n	8002572 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b04      	cmp	r3, #4
 800256e:	d1a2      	bne.n	80024b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	fe00e800 	.word	0xfe00e800

08002580 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d151      	bne.n	800263e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800259a:	e022      	b.n	80025e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a2:	d01e      	beq.n	80025e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a4:	f7ff f932 	bl	800180c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d302      	bcc.n	80025ba <I2C_IsAcknowledgeFailed+0x3a>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d113      	bne.n	80025e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e02e      	b.n	8002640 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d1d5      	bne.n	800259c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2210      	movs	r2, #16
 80025f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2220      	movs	r2, #32
 80025fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff fe71 	bl	80022e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <I2C_IsAcknowledgeFailed+0xc8>)
 8002612:	400b      	ands	r3, r1
 8002614:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	f043 0204 	orr.w	r2, r3, #4
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	fe00e800 	.word	0xfe00e800

0800264c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	607b      	str	r3, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	4613      	mov	r3, r2
 800265c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	0d5b      	lsrs	r3, r3, #21
 8002668:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800266c:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <I2C_TransferConfig+0x58>)
 800266e:	430b      	orrs	r3, r1
 8002670:	43db      	mvns	r3, r3
 8002672:	ea02 0103 	and.w	r1, r2, r3
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800267c:	7a7b      	ldrb	r3, [r7, #9]
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	431a      	orrs	r2, r3
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	431a      	orrs	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	03ff63ff 	.word	0x03ff63ff

080026a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d138      	bne.n	8002730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e032      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	; 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	e000      	b.n	8002732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002730:	2302      	movs	r3, #2
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d139      	bne.n	80027c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800275e:	2302      	movs	r3, #2
 8002760:	e033      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2224      	movs	r2, #36	; 0x24
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0201 	bic.w	r2, r2, #1
 8002780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	e000      	b.n	80027ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	4a22      	ldr	r2, [pc, #136]	; (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	6413      	str	r3, [r2, #64]	; 0x40
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_PWREx_EnableOverDrive+0x98>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027fa:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002806:	f7ff f801 	bl	800180c <HAL_GetTick>
 800280a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800280c:	e009      	b.n	8002822 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800280e:	f7fe fffd 	bl	800180c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281c:	d901      	bls.n	8002822 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e022      	b.n	8002868 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282e:	d1ee      	bne.n	800280e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800283c:	f7fe ffe6 	bl	800180c <HAL_GetTick>
 8002840:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002842:	e009      	b.n	8002858 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002844:	f7fe ffe2 	bl	800180c <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002852:	d901      	bls.n	8002858 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e007      	b.n	8002868 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_PWREx_EnableOverDrive+0x9c>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002864:	d1ee      	bne.n	8002844 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000

08002878 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e291      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 8087 	beq.w	80029aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800289c:	4b96      	ldr	r3, [pc, #600]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 030c 	and.w	r3, r3, #12
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d00c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a8:	4b93      	ldr	r3, [pc, #588]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d112      	bne.n	80028da <HAL_RCC_OscConfig+0x62>
 80028b4:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c0:	d10b      	bne.n	80028da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4b8d      	ldr	r3, [pc, #564]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d06c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x130>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d168      	bne.n	80029a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e26b      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x7a>
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a83      	ldr	r2, [pc, #524]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	e02e      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x9c>
 80028fa:	4b7f      	ldr	r3, [pc, #508]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a7e      	ldr	r2, [pc, #504]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	4b7c      	ldr	r3, [pc, #496]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7b      	ldr	r2, [pc, #492]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800290c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e01d      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0xc0>
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a75      	ldr	r2, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a72      	ldr	r2, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0xd8>
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6e      	ldr	r2, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b6c      	ldr	r3, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a6b      	ldr	r2, [pc, #428]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe ff58 	bl	800180c <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe ff54 	bl	800180c <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e21f      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0xe8>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe ff44 	bl	800180c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe ff40 	bl	800180c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e20b      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x110>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d069      	beq.n	8002a8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029b6:	4b50      	ldr	r3, [pc, #320]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d11c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x190>
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	4b47      	ldr	r3, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e1df      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	493d      	ldr	r1, [pc, #244]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	e040      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d023      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a38      	ldr	r2, [pc, #224]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fef6 	bl	800180c <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a24:	f7fe fef2 	bl	800180c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1bd      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4929      	ldr	r1, [pc, #164]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
 8002a56:	e018      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a26      	ldr	r2, [pc, #152]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe fed2 	bl	800180c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fece 	bl	800180c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e199      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d038      	beq.n	8002b08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d019      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	4a15      	ldr	r2, [pc, #84]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe feaf 	bl	800180c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab2:	f7fe feab 	bl	800180c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e176      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x23a>
 8002ad0:	e01a      	b.n	8002b08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad6:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ade:	f7fe fe95 	bl	800180c <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae6:	f7fe fe91 	bl	800180c <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d903      	bls.n	8002afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e15c      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
 8002af8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b91      	ldr	r3, [pc, #580]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1ee      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a4 	beq.w	8002c5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b8b      	ldr	r3, [pc, #556]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b88      	ldr	r3, [pc, #544]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b85      	ldr	r3, [pc, #532]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b3e:	4b82      	ldr	r3, [pc, #520]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7e      	ldr	r2, [pc, #504]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fe fe59 	bl	800180c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe fe55 	bl	800180c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	; 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e120      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b70:	4b75      	ldr	r3, [pc, #468]	; (8002d48 <HAL_RCC_OscConfig+0x4d0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x31a>
 8002b84:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a6e      	ldr	r2, [pc, #440]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e02d      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x33c>
 8002b9a:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a69      	ldr	r2, [pc, #420]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba6:	4b67      	ldr	r3, [pc, #412]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a66      	ldr	r2, [pc, #408]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	e01c      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x35e>
 8002bbc:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a60      	ldr	r2, [pc, #384]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b5e      	ldr	r3, [pc, #376]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a5d      	ldr	r2, [pc, #372]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
 8002bd6:	4b5b      	ldr	r3, [pc, #364]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a5a      	ldr	r2, [pc, #360]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
 8002be2:	4b58      	ldr	r3, [pc, #352]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a57      	ldr	r2, [pc, #348]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fe09 	bl	800180c <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fe05 	bl	800180c <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0ce      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ee      	beq.n	8002bfe <HAL_RCC_OscConfig+0x386>
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe fdf3 	bl	800180c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe fdef 	bl	800180c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	4b40      	ldr	r3, [pc, #256]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b3c      	ldr	r3, [pc, #240]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	4a3b      	ldr	r2, [pc, #236]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a4 	beq.w	8002db0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d06b      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d149      	bne.n	8002d10 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fdc0 	bl	800180c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fdbc 	bl	800180c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e087      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	019b      	lsls	r3, r3, #6
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002cda:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fd90 	bl	800180c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7fe fd8c 	bl	800180c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e057      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x478>
 8002d0e:	e04f      	b.n	8002db0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fd76 	bl	800180c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fd72 	bl	800180c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e03d      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x4ac>
 8002d42:	e035      	b.n	8002db0 <HAL_RCC_OscConfig+0x538>
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x544>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d028      	beq.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d121      	bne.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d11a      	bne.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d82:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d111      	bne.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	3b01      	subs	r3, #1
 8002d96:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800

08002dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0d0      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b67      	ldr	r3, [pc, #412]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	4965      	ldr	r1, [pc, #404]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d040      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d107      	bne.n	8002e92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e073      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06b      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea2:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f023 0203 	bic.w	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4936      	ldr	r1, [pc, #216]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fcaa 	bl	800180c <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ebc:	f7fe fca6 	bl	800180c <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e053      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 020c 	and.w	r2, r3, #12
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1eb      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee4:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d210      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 020f 	bic.w	r2, r3, #15
 8002efa:	4922      	ldr	r1, [pc, #136]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f821 	bl	8002f98 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1cc>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1d0>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1d4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fc06 	bl	8001784 <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08004000 	.word	0x08004000
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f98:	b5b0      	push	{r4, r5, r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	6079      	str	r1, [r7, #4]
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	60f9      	str	r1, [r7, #12]
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002faa:	2100      	movs	r1, #0
 8002fac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fae:	4952      	ldr	r1, [pc, #328]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fb0:	6889      	ldr	r1, [r1, #8]
 8002fb2:	f001 010c 	and.w	r1, r1, #12
 8002fb6:	2908      	cmp	r1, #8
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x3e>
 8002fba:	2908      	cmp	r1, #8
 8002fbc:	f200 8094 	bhi.w	80030e8 <HAL_RCC_GetSysClockFreq+0x150>
 8002fc0:	2900      	cmp	r1, #0
 8002fc2:	d002      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x32>
 8002fc4:	2904      	cmp	r1, #4
 8002fc6:	d003      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x38>
 8002fc8:	e08e      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_GetSysClockFreq+0x164>)
 8002fcc:	60bb      	str	r3, [r7, #8]
      break;
 8002fce:	e08e      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd0:	4b4b      	ldr	r3, [pc, #300]	; (8003100 <HAL_RCC_GetSysClockFreq+0x168>)
 8002fd2:	60bb      	str	r3, [r7, #8]
      break;
 8002fd4:	e08b      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fd6:	4948      	ldr	r1, [pc, #288]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fd8:	6849      	ldr	r1, [r1, #4]
 8002fda:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002fde:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fe0:	4945      	ldr	r1, [pc, #276]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fe2:	6849      	ldr	r1, [r1, #4]
 8002fe4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d024      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fec:	4942      	ldr	r1, [pc, #264]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fee:	6849      	ldr	r1, [r1, #4]
 8002ff0:	0989      	lsrs	r1, r1, #6
 8002ff2:	4608      	mov	r0, r1
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ffc:	f04f 0500 	mov.w	r5, #0
 8003000:	ea00 0204 	and.w	r2, r0, r4
 8003004:	ea01 0305 	and.w	r3, r1, r5
 8003008:	493d      	ldr	r1, [pc, #244]	; (8003100 <HAL_RCC_GetSysClockFreq+0x168>)
 800300a:	fb01 f003 	mul.w	r0, r1, r3
 800300e:	2100      	movs	r1, #0
 8003010:	fb01 f102 	mul.w	r1, r1, r2
 8003014:	1844      	adds	r4, r0, r1
 8003016:	493a      	ldr	r1, [pc, #232]	; (8003100 <HAL_RCC_GetSysClockFreq+0x168>)
 8003018:	fba2 0101 	umull	r0, r1, r2, r1
 800301c:	1863      	adds	r3, r4, r1
 800301e:	4619      	mov	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	461a      	mov	r2, r3
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	f7fd fd0c 	bl	8000a44 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4613      	mov	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e04a      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003036:	4b30      	ldr	r3, [pc, #192]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	099b      	lsrs	r3, r3, #6
 800303c:	461a      	mov	r2, r3
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003046:	f04f 0100 	mov.w	r1, #0
 800304a:	ea02 0400 	and.w	r4, r2, r0
 800304e:	ea03 0501 	and.w	r5, r3, r1
 8003052:	4620      	mov	r0, r4
 8003054:	4629      	mov	r1, r5
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	014b      	lsls	r3, r1, #5
 8003060:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003064:	0142      	lsls	r2, r0, #5
 8003066:	4610      	mov	r0, r2
 8003068:	4619      	mov	r1, r3
 800306a:	1b00      	subs	r0, r0, r4
 800306c:	eb61 0105 	sbc.w	r1, r1, r5
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	018b      	lsls	r3, r1, #6
 800307a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800307e:	0182      	lsls	r2, r0, #6
 8003080:	1a12      	subs	r2, r2, r0
 8003082:	eb63 0301 	sbc.w	r3, r3, r1
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	00d9      	lsls	r1, r3, #3
 8003090:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003094:	00d0      	lsls	r0, r2, #3
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	1912      	adds	r2, r2, r4
 800309c:	eb45 0303 	adc.w	r3, r5, r3
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	0299      	lsls	r1, r3, #10
 80030aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030ae:	0290      	lsls	r0, r2, #10
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	f7fd fcc0 	bl	8000a44 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	3301      	adds	r3, #1
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e4:	60bb      	str	r3, [r7, #8]
      break;
 80030e6:	e002      	b.n	80030ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <HAL_RCC_GetSysClockFreq+0x164>)
 80030ea:	60bb      	str	r3, [r7, #8]
      break;
 80030ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030ee:	68bb      	ldr	r3, [r7, #8]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdb0      	pop	{r4, r5, r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	00f42400 	.word	0x00f42400
 8003100:	017d7840 	.word	0x017d7840

08003104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d012      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800312c:	4b69      	ldr	r3, [pc, #420]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a68      	ldr	r2, [pc, #416]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003132:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003136:	6093      	str	r3, [r2, #8]
 8003138:	4b66      	ldr	r3, [pc, #408]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	4964      	ldr	r1, [pc, #400]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d017      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800315e:	4b5d      	ldr	r3, [pc, #372]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316c:	4959      	ldr	r1, [pc, #356]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317c:	d101      	bne.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800317e:	2301      	movs	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d017      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800319a:	4b4e      	ldr	r3, [pc, #312]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	494a      	ldr	r1, [pc, #296]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b8:	d101      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 808b 	beq.w	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80031e8:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	4a39      	ldr	r2, [pc, #228]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6413      	str	r3, [r2, #64]	; 0x40
 80031f4:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a34      	ldr	r2, [pc, #208]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320c:	f7fe fafe 	bl	800180c <HAL_GetTick>
 8003210:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fe fafa 	bl	800180c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e357      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003226:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003232:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d035      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	429a      	cmp	r2, r3
 800324e:	d02e      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003258:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a1d      	ldr	r2, [pc, #116]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003266:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a1a      	ldr	r2, [pc, #104]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003270:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003272:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003278:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d114      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe fac2 	bl	800180c <HAL_GetTick>
 8003288:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328a:	e00a      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fabe 	bl	800180c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e319      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ee      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032ba:	d111      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032c8:	4b04      	ldr	r3, [pc, #16]	; (80032dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032ca:	400b      	ands	r3, r1
 80032cc:	4901      	ldr	r1, [pc, #4]	; (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
 80032d2:	e00b      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000
 80032dc:	0ffffcff 	.word	0x0ffffcff
 80032e0:	4bb1      	ldr	r3, [pc, #708]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4ab0      	ldr	r2, [pc, #704]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80032ea:	6093      	str	r3, [r2, #8]
 80032ec:	4bae      	ldr	r3, [pc, #696]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	49ab      	ldr	r1, [pc, #684]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800330a:	4ba7      	ldr	r3, [pc, #668]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800330c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003310:	4aa5      	ldr	r2, [pc, #660]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003316:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800331a:	4ba3      	ldr	r3, [pc, #652]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800331c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	49a0      	ldr	r1, [pc, #640]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003338:	4b9b      	ldr	r3, [pc, #620]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003346:	4998      	ldr	r1, [pc, #608]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800335a:	4b93      	ldr	r3, [pc, #588]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003368:	498f      	ldr	r1, [pc, #572]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800337c:	4b8a      	ldr	r3, [pc, #552]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338a:	4987      	ldr	r1, [pc, #540]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	497e      	ldr	r1, [pc, #504]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033c0:	4b79      	ldr	r3, [pc, #484]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	f023 0203 	bic.w	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4976      	ldr	r1, [pc, #472]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033e2:	4b71      	ldr	r3, [pc, #452]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e8:	f023 020c 	bic.w	r2, r3, #12
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f0:	496d      	ldr	r1, [pc, #436]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003404:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	4965      	ldr	r1, [pc, #404]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003426:	4b60      	ldr	r3, [pc, #384]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	495c      	ldr	r1, [pc, #368]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003448:	4b57      	ldr	r3, [pc, #348]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	4954      	ldr	r1, [pc, #336]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800346a:	4b4f      	ldr	r3, [pc, #316]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	494b      	ldr	r1, [pc, #300]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800348c:	4b46      	ldr	r3, [pc, #280]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	4943      	ldr	r1, [pc, #268]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034ae:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	493a      	ldr	r1, [pc, #232]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034de:	4932      	ldr	r1, [pc, #200]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d011      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003500:	4929      	ldr	r1, [pc, #164]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800350c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003510:	d101      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003512:	2301      	movs	r3, #1
 8003514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003540:	4919      	ldr	r1, [pc, #100]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00b      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003554:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003564:	4910      	ldr	r1, [pc, #64]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d006      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80d9 	beq.w	8003732 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003580:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a08      	ldr	r2, [pc, #32]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003586:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800358a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800358c:	f7fe f93e 	bl	800180c <HAL_GetTick>
 8003590:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003592:	e00b      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003594:	f7fe f93a 	bl	800180c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	; 0x64
 80035a0:	d904      	bls.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e197      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80035a6:	bf00      	nop
 80035a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035ac:	4b6c      	ldr	r3, [pc, #432]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1ed      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d021      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d11d      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035cc:	4b64      	ldr	r3, [pc, #400]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035da:	4b61      	ldr	r3, [pc, #388]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035e0:	0e1b      	lsrs	r3, r3, #24
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	019a      	lsls	r2, r3, #6
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	061b      	lsls	r3, r3, #24
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	071b      	lsls	r3, r3, #28
 8003600:	4957      	ldr	r1, [pc, #348]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361c:	d00a      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003626:	2b00      	cmp	r3, #0
 8003628:	d02e      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003632:	d129      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003634:	4b4a      	ldr	r3, [pc, #296]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800363a:	0c1b      	lsrs	r3, r3, #16
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003648:	0f1b      	lsrs	r3, r3, #28
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	019a      	lsls	r2, r3, #6
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	041b      	lsls	r3, r3, #16
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	431a      	orrs	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	071b      	lsls	r3, r3, #28
 8003668:	493d      	ldr	r1, [pc, #244]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800366a:	4313      	orrs	r3, r2
 800366c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003676:	f023 021f 	bic.w	r2, r3, #31
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	3b01      	subs	r3, #1
 8003680:	4937      	ldr	r1, [pc, #220]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01d      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003694:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369a:	0e1b      	lsrs	r3, r3, #24
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036a2:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a8:	0f1b      	lsrs	r3, r3, #28
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	019a      	lsls	r2, r3, #6
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	431a      	orrs	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	431a      	orrs	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	071b      	lsls	r3, r3, #28
 80036c8:	4925      	ldr	r1, [pc, #148]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d011      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	019a      	lsls	r2, r3, #6
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	071b      	lsls	r3, r3, #28
 80036f8:	4919      	ldr	r1, [pc, #100]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a16      	ldr	r2, [pc, #88]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003706:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fe f87e 	bl	800180c <HAL_GetTick>
 8003710:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003714:	f7fe f87a 	bl	800180c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e0d7      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b01      	cmp	r3, #1
 8003736:	f040 80cd 	bne.w	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003746:	f7fe f861 	bl	800180c <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800374c:	e00a      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800374e:	f7fe f85d 	bl	800180c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b64      	cmp	r3, #100	; 0x64
 800375a:	d903      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e0ba      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003760:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003764:	4b5e      	ldr	r3, [pc, #376]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003770:	d0ed      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02e      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d12a      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800379a:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800379c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a0:	0c1b      	lsrs	r3, r3, #16
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037a8:	4b4d      	ldr	r3, [pc, #308]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	0f1b      	lsrs	r3, r3, #28
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	019a      	lsls	r2, r3, #6
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	061b      	lsls	r3, r3, #24
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	071b      	lsls	r3, r3, #28
 80037ce:	4944      	ldr	r1, [pc, #272]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037d6:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	493d      	ldr	r1, [pc, #244]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d022      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003804:	d11d      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003806:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380c:	0e1b      	lsrs	r3, r3, #24
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003814:	4b32      	ldr	r3, [pc, #200]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381a:	0f1b      	lsrs	r3, r3, #28
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	019a      	lsls	r2, r3, #6
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	431a      	orrs	r2, r3
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	061b      	lsls	r3, r3, #24
 8003834:	431a      	orrs	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	071b      	lsls	r3, r3, #28
 800383a:	4929      	ldr	r1, [pc, #164]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d028      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800384e:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	0e1b      	lsrs	r3, r3, #24
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	f003 0303 	and.w	r3, r3, #3
 8003868:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	019a      	lsls	r2, r3, #6
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	431a      	orrs	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	061b      	lsls	r3, r3, #24
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	071b      	lsls	r3, r3, #28
 8003882:	4917      	ldr	r1, [pc, #92]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	4911      	ldr	r1, [pc, #68]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0e      	ldr	r2, [pc, #56]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fd ffae 	bl	800180c <HAL_GetTick>
 80038b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038b4:	f7fd ffaa 	bl	800180c <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e007      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d2:	d1ef      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e049      	b.n	800398a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fea8 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f000 f96c 	bl	8003c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d001      	beq.n	80039ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e04c      	b.n	8003a46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <HAL_TIM_Base_Start+0xc0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d022      	beq.n	8003a04 <HAL_TIM_Base_Start+0x70>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d01d      	beq.n	8003a04 <HAL_TIM_Base_Start+0x70>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a22      	ldr	r2, [pc, #136]	; (8003a58 <HAL_TIM_Base_Start+0xc4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d018      	beq.n	8003a04 <HAL_TIM_Base_Start+0x70>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	; (8003a5c <HAL_TIM_Base_Start+0xc8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d013      	beq.n	8003a04 <HAL_TIM_Base_Start+0x70>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <HAL_TIM_Base_Start+0xcc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00e      	beq.n	8003a04 <HAL_TIM_Base_Start+0x70>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <HAL_TIM_Base_Start+0xd0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d009      	beq.n	8003a04 <HAL_TIM_Base_Start+0x70>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1c      	ldr	r2, [pc, #112]	; (8003a68 <HAL_TIM_Base_Start+0xd4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_TIM_Base_Start+0x70>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <HAL_TIM_Base_Start+0xd8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d115      	bne.n	8003a30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_TIM_Base_Start+0xdc>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d015      	beq.n	8003a42 <HAL_TIM_Base_Start+0xae>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1c:	d011      	beq.n	8003a42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2e:	e008      	b.n	8003a42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	e000      	b.n	8003a44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000c00 	.word	0x40000c00
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40001800 	.word	0x40001800
 8003a70:	00010007 	.word	0x00010007

08003a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIM_ConfigClockSource+0x18>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0b3      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x180>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4b55      	ldr	r3, [pc, #340]	; (8003bfc <HAL_TIM_ConfigClockSource+0x188>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac4:	d03e      	beq.n	8003b44 <HAL_TIM_ConfigClockSource+0xd0>
 8003ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aca:	f200 8087 	bhi.w	8003bdc <HAL_TIM_ConfigClockSource+0x168>
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad2:	f000 8085 	beq.w	8003be0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ada:	d87f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x168>
 8003adc:	2b70      	cmp	r3, #112	; 0x70
 8003ade:	d01a      	beq.n	8003b16 <HAL_TIM_ConfigClockSource+0xa2>
 8003ae0:	2b70      	cmp	r3, #112	; 0x70
 8003ae2:	d87b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x168>
 8003ae4:	2b60      	cmp	r3, #96	; 0x60
 8003ae6:	d050      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0x116>
 8003ae8:	2b60      	cmp	r3, #96	; 0x60
 8003aea:	d877      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x168>
 8003aec:	2b50      	cmp	r3, #80	; 0x50
 8003aee:	d03c      	beq.n	8003b6a <HAL_TIM_ConfigClockSource+0xf6>
 8003af0:	2b50      	cmp	r3, #80	; 0x50
 8003af2:	d873      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x168>
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d058      	beq.n	8003baa <HAL_TIM_ConfigClockSource+0x136>
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d86f      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x168>
 8003afc:	2b30      	cmp	r3, #48	; 0x30
 8003afe:	d064      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x156>
 8003b00:	2b30      	cmp	r3, #48	; 0x30
 8003b02:	d86b      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x168>
 8003b04:	2b20      	cmp	r3, #32
 8003b06:	d060      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x156>
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d867      	bhi.n	8003bdc <HAL_TIM_ConfigClockSource+0x168>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d05c      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x156>
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d05a      	beq.n	8003bca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b14:	e062      	b.n	8003bdc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6899      	ldr	r1, [r3, #8]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f000 f985 	bl	8003e34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	609a      	str	r2, [r3, #8]
      break;
 8003b42:	e04e      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6899      	ldr	r1, [r3, #8]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f000 f96e 	bl	8003e34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b66:	609a      	str	r2, [r3, #8]
      break;
 8003b68:	e03b      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	461a      	mov	r2, r3
 8003b78:	f000 f8e2 	bl	8003d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2150      	movs	r1, #80	; 0x50
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f93b 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 8003b88:	e02b      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	461a      	mov	r2, r3
 8003b98:	f000 f901 	bl	8003d9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2160      	movs	r1, #96	; 0x60
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f92b 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 8003ba8:	e01b      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f000 f8c2 	bl	8003d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 f91b 	bl	8003dfe <TIM_ITRx_SetConfig>
      break;
 8003bc8:	e00b      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f000 f912 	bl	8003dfe <TIM_ITRx_SetConfig>
        break;
 8003bda:	e002      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003bdc:	bf00      	nop
 8003bde:	e000      	b.n	8003be2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003be0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	fffeff88 	.word	0xfffeff88

08003c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a40      	ldr	r2, [pc, #256]	; (8003d14 <TIM_Base_SetConfig+0x114>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1e:	d00f      	beq.n	8003c40 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3d      	ldr	r2, [pc, #244]	; (8003d18 <TIM_Base_SetConfig+0x118>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a3c      	ldr	r2, [pc, #240]	; (8003d1c <TIM_Base_SetConfig+0x11c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d007      	beq.n	8003c40 <TIM_Base_SetConfig+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a3b      	ldr	r2, [pc, #236]	; (8003d20 <TIM_Base_SetConfig+0x120>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a3a      	ldr	r2, [pc, #232]	; (8003d24 <TIM_Base_SetConfig+0x124>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d108      	bne.n	8003c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <TIM_Base_SetConfig+0x114>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d02b      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d027      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2c      	ldr	r2, [pc, #176]	; (8003d18 <TIM_Base_SetConfig+0x118>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d023      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2b      	ldr	r2, [pc, #172]	; (8003d1c <TIM_Base_SetConfig+0x11c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2a      	ldr	r2, [pc, #168]	; (8003d20 <TIM_Base_SetConfig+0x120>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01b      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a29      	ldr	r2, [pc, #164]	; (8003d24 <TIM_Base_SetConfig+0x124>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d017      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a28      	ldr	r2, [pc, #160]	; (8003d28 <TIM_Base_SetConfig+0x128>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a27      	ldr	r2, [pc, #156]	; (8003d2c <TIM_Base_SetConfig+0x12c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00f      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <TIM_Base_SetConfig+0x130>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <TIM_Base_SetConfig+0x134>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a24      	ldr	r2, [pc, #144]	; (8003d38 <TIM_Base_SetConfig+0x138>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a23      	ldr	r2, [pc, #140]	; (8003d3c <TIM_Base_SetConfig+0x13c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <TIM_Base_SetConfig+0x114>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_Base_SetConfig+0xf8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <TIM_Base_SetConfig+0x124>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d103      	bne.n	8003d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	615a      	str	r2, [r3, #20]
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800
 8003d20:	40000c00 	.word	0x40000c00
 8003d24:	40010400 	.word	0x40010400
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800
 8003d34:	40001800 	.word	0x40001800
 8003d38:	40001c00 	.word	0x40001c00
 8003d3c:	40002000 	.word	0x40002000

08003d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0201 	bic.w	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 030a 	bic.w	r3, r3, #10
 8003d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b087      	sub	sp, #28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0210 	bic.w	r2, r3, #16
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	031b      	lsls	r3, r3, #12
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b085      	sub	sp, #20
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f043 0307 	orr.w	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	609a      	str	r2, [r3, #8]
}
 8003e28:	bf00      	nop
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	609a      	str	r2, [r3, #8]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e06d      	b.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a30      	ldr	r2, [pc, #192]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d004      	beq.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a2f      	ldr	r2, [pc, #188]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ec6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d01d      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1c      	ldr	r2, [pc, #112]	; (8003f80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1a      	ldr	r2, [pc, #104]	; (8003f84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a16      	ldr	r2, [pc, #88]	; (8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d10c      	bne.n	8003f56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40010400 	.word	0x40010400
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40001800 	.word	0x40001800

08003f90 <__libc_init_array>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4d0d      	ldr	r5, [pc, #52]	; (8003fc8 <__libc_init_array+0x38>)
 8003f94:	4c0d      	ldr	r4, [pc, #52]	; (8003fcc <__libc_init_array+0x3c>)
 8003f96:	1b64      	subs	r4, r4, r5
 8003f98:	10a4      	asrs	r4, r4, #2
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	42a6      	cmp	r6, r4
 8003f9e:	d109      	bne.n	8003fb4 <__libc_init_array+0x24>
 8003fa0:	4d0b      	ldr	r5, [pc, #44]	; (8003fd0 <__libc_init_array+0x40>)
 8003fa2:	4c0c      	ldr	r4, [pc, #48]	; (8003fd4 <__libc_init_array+0x44>)
 8003fa4:	f000 f820 	bl	8003fe8 <_init>
 8003fa8:	1b64      	subs	r4, r4, r5
 8003faa:	10a4      	asrs	r4, r4, #2
 8003fac:	2600      	movs	r6, #0
 8003fae:	42a6      	cmp	r6, r4
 8003fb0:	d105      	bne.n	8003fbe <__libc_init_array+0x2e>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb8:	4798      	blx	r3
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7ee      	b.n	8003f9c <__libc_init_array+0xc>
 8003fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc2:	4798      	blx	r3
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	e7f2      	b.n	8003fae <__libc_init_array+0x1e>
 8003fc8:	08004018 	.word	0x08004018
 8003fcc:	08004018 	.word	0x08004018
 8003fd0:	08004018 	.word	0x08004018
 8003fd4:	0800401c 	.word	0x0800401c

08003fd8 <memset>:
 8003fd8:	4402      	add	r2, r0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <_init>:
 8003fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fea:	bf00      	nop
 8003fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fee:	bc08      	pop	{r3}
 8003ff0:	469e      	mov	lr, r3
 8003ff2:	4770      	bx	lr

08003ff4 <_fini>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr
